// Create abstract class account having member id. name, balance
// Id is generated by application It is readonly property for ID.
// It has abstract method public abstract void withdraw(double amt);
// It has static method public static double payint(); which will return interest and increase balance 
//if account holder has positive balance
// It has deposit method which will increase the balance.
// Write getter setter for name 
// Balance can be set only by child class.
// It has static double int_rate=0.07
// Create two child class Saving, Current
// Initialise data by calling parentclass constructor
// In saving account maintain minimum balance 1000 for this declare
// Const double minbal=1000
// In current account negative balance allowed.
// Let both child class override withdraw method.
// Create array of account class and store 2 object of saving account and current account.
// Do the transaction. When you load it should print name of bank4

public delegate  void del(int id,string name,double balance,double withdraw1); 

abstract class Account
{
    public event del d;
    public int id;

    static int getid;
    string name;
    double balance;
    static int count;

    static Account()
    {
    System.Console.WriteLine("Bank of Scam");
    }
    public Account(string name,double balance)
    {
        
        count++;
        if(count>3)
        {
            throw new Exception("Index Array Out Of Bound");
           
        }
        else
        {
             Name=name;
            Balance=balance;
            id=++getid;

        }
    
    }
    public string Name
     { 
        get
        {
             return name;
        }
       
         set
         {
            if(value.Length <3 || value.Length>12)
            {
                 throw new Exception("Name should be >3 && <12");


            }
            else
            {
                 name=value;         
            }
           
         }
         
    }

    public double Balance { get; set; }


    public abstract void withdraw(double amt);

    static double int_rate=7;
    public static double payint(Account obj)
    {
        double Intrest=obj.Balance*int_rate/100;
        return Intrest;
    }

    public void deposit (double amt)
    {
        balance+=amt;
        System.Console.WriteLine("Deposit Amount:"+balance);
    }

    public void send(int id,string name,double balance,double withdraw1)
    {
        if(d!=null)
        d(id,name, balance,withdraw1);
    }

    public override string ToString()
    {
        return "id:"+id+"  Name:"+name+"  Balance:"+Balance;
    }

}

class Saving:Account
{
    static int min_bal=1000;
    public Saving(string name,double balance):base(name,balance)
    {

    }

    public override void  withdraw(double amt)
    {
        if(Balance-amt>min_bal)
        {
            Balance-=amt;
        }
        else
        throw new Exception("Balance should be greater than 1000");
        
        send(id,Name,Balance,amt);
    }

}

class Current:Account
{
    public Current(string name,double balance):base(name,balance)
    {

    }

    public override void  withdraw(double amt)
    {
        
            Balance-=amt;      
        send(id,Name,Balance,amt);
    }
}

class Message
{
    public void Email(int id,string name,double balance,double withdraw1)
    {
        System.Console.WriteLine("=============================================Email===========================================");
        System.Console.WriteLine("Email: ID: {0} Name: {1} Balance: {2} Withdraw: {3} ",id,name,balance, withdraw1 );
    }

     public void SMS(int id,string name,double balance,double withdraw1)
    {
        System.Console.WriteLine("=============================================SMS===========================================");
        System.Console.WriteLine("Email: ID: {0} Name: {1} Balance: {2} Withdraw: {3} ",id,name,balance,withdraw1 );
    }
}

class demo
{
    static void Main()
    {
        try{
              Account []arr=new Account[3];
        Message m1=new Message();

        arr[0]=new Saving("Sohan",9999);
        arr[1]=new Saving("Rohan",75000);
        arr[2]=new Current("Mohan",60000);
        //arr[3]=new Current("Mohan",60000);

         System.Console.WriteLine(arr[0]);

       System.Console.WriteLine(arr[1]);

       System.Console.WriteLine(arr[2]);


        for(int i=0;i<arr.Length;i++)
        {
           System.Console.WriteLine("Intrest:"+Account.payint(arr[i]));
           
            arr[i].d+=m1.Email;
            arr[i].d+=m1.SMS;
        }

        // for(int i=0;i<=arr.Length;i++)
        // {
        //     arr[i].d+=m1.Email;
        //     arr[i].d+=m1.SMS;
        //     System.Console.WriteLine("Intrest:"+Account.payint(arr[i]));

        // }

        arr[0].withdraw(2000);
        arr[1].withdraw(5000);
        arr[1].deposit(2000);
        arr[2].withdraw(5000);


    }
    catch(Exception e)
    {
        System.Console.WriteLine(e.Message);
    }
        }
      
}